import warnings
warnings.filterwarnings('ignore')


# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score



# Load the dataset
dataset = pd.read_csv('./datasets/Social_Network_Ads.csv')


#  Preprocessing the data
X = dataset[['Age', 'EstimatedSalary']].values #'Age' and 'EstimatedSalary' as features
y = dataset['Purchased'].values #'Purchased' as the target variable


# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)


# Feature scaling (KNN is distance-based, so scaling is important)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


#  Train the KNN model
knn = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)  # Euclidean distance (p=2)
knn.fit(X_train, y_train)


#  Predicting the Test set results
y_pred = knn.predict(X_test)


#  Evaluate the model
# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)


# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")


# Error Rate
error_rate = 1 - accuracy
print(f"Error Rate: {error_rate * 100:.2f}%")



# Precision
precision = precision_score(y_test, y_pred)
print(f"Precision: {precision:.2f}")


# Recall
recall = recall_score(y_test, y_pred)
print(f"Recall: {recall:.2f}")